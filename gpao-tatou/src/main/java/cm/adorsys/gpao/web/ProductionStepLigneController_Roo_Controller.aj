// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.web;

import cm.adorsys.gpao.model.Product;
import cm.adorsys.gpao.model.ProductionProductLigneConfig;
import cm.adorsys.gpao.model.ProductionProductLigneType;
import cm.adorsys.gpao.model.ProductionStep;
import cm.adorsys.gpao.model.ProductionStepLigne;
import cm.adorsys.gpao.web.ProductionStepLigneController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProductionStepLigneController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ProductionStepLigneController.create(@Valid ProductionStepLigne productionStepLigne, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, productionStepLigne);
            return "productionsteplignes/create";
        }
        uiModel.asMap().clear();
        productionStepLigne.persist();
        return "redirect:/productionsteplignes/" + encodeUrlPathSegment(productionStepLigne.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ProductionStepLigneController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ProductionStepLigne());
        return "productionsteplignes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ProductionStepLigneController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("productionstepligne", ProductionStepLigne.findProductionStepLigne(id));
        uiModel.addAttribute("itemId", id);
        return "productionsteplignes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ProductionStepLigneController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("productionsteplignes", ProductionStepLigne.findProductionStepLigneEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) ProductionStepLigne.countProductionStepLignes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("productionsteplignes", ProductionStepLigne.findAllProductionStepLignes(sortFieldName, sortOrder));
        }
        return "productionsteplignes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ProductionStepLigneController.update(@Valid ProductionStepLigne productionStepLigne, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, productionStepLigne);
            return "productionsteplignes/update";
        }
        uiModel.asMap().clear();
        productionStepLigne.merge();
        return "redirect:/productionsteplignes/" + encodeUrlPathSegment(productionStepLigne.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ProductionStepLigneController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ProductionStepLigne.findProductionStepLigne(id));
        return "productionsteplignes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ProductionStepLigneController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ProductionStepLigne productionStepLigne = ProductionStepLigne.findProductionStepLigne(id);
        productionStepLigne.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/productionsteplignes";
    }
    
    void ProductionStepLigneController.populateEditForm(Model uiModel, ProductionStepLigne productionStepLigne) {
        uiModel.addAttribute("productionStepLigne", productionStepLigne);
        uiModel.addAttribute("products", Product.findAllProducts());
        uiModel.addAttribute("productionproductligneconfigs", ProductionProductLigneConfig.findAllProductionProductLigneConfigs());
        uiModel.addAttribute("productionproductlignetypes", Arrays.asList(ProductionProductLigneType.values()));
        uiModel.addAttribute("productionsteps", ProductionStep.findAllProductionSteps());
    }
    
    String ProductionStepLigneController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
