// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.DocumentStates;
import cm.adorsys.gpao.model.Production;
import cm.adorsys.gpao.model.ProductionStep;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ProductionStep_Roo_Finder {
    
    public static Long ProductionStep.countFindProductionStepsByProduction(Production production) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        EntityManager em = ProductionStep.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionStep AS o WHERE o.production = :production", Long.class);
        q.setParameter("production", production);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProductionStep.countFindProductionStepsByProductionAndStepState(Production production, DocumentStates stepState) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        if (stepState == null) throw new IllegalArgumentException("The stepState argument is required");
        EntityManager em = ProductionStep.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionStep AS o WHERE o.production = :production AND o.stepState = :stepState", Long.class);
        q.setParameter("production", production);
        q.setParameter("stepState", stepState);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ProductionStep> ProductionStep.findProductionStepsByProduction(Production production) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        EntityManager em = ProductionStep.entityManager();
        TypedQuery<ProductionStep> q = em.createQuery("SELECT o FROM ProductionStep AS o WHERE o.production = :production", ProductionStep.class);
        q.setParameter("production", production);
        return q;
    }
    
    public static TypedQuery<ProductionStep> ProductionStep.findProductionStepsByProduction(Production production, String sortFieldName, String sortOrder) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        EntityManager em = ProductionStep.entityManager();
        String jpaQuery = "SELECT o FROM ProductionStep AS o WHERE o.production = :production";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionStep> q = em.createQuery(jpaQuery, ProductionStep.class);
        q.setParameter("production", production);
        return q;
    }
    
    public static TypedQuery<ProductionStep> ProductionStep.findProductionStepsByProductionAndStepState(Production production, DocumentStates stepState) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        if (stepState == null) throw new IllegalArgumentException("The stepState argument is required");
        EntityManager em = ProductionStep.entityManager();
        TypedQuery<ProductionStep> q = em.createQuery("SELECT o FROM ProductionStep AS o WHERE o.production = :production AND o.stepState = :stepState", ProductionStep.class);
        q.setParameter("production", production);
        q.setParameter("stepState", stepState);
        return q;
    }
    
    public static TypedQuery<ProductionStep> ProductionStep.findProductionStepsByProductionAndStepState(Production production, DocumentStates stepState, String sortFieldName, String sortOrder) {
        if (production == null) throw new IllegalArgumentException("The production argument is required");
        if (stepState == null) throw new IllegalArgumentException("The stepState argument is required");
        EntityManager em = ProductionStep.entityManager();
        String jpaQuery = "SELECT o FROM ProductionStep AS o WHERE o.production = :production AND o.stepState = :stepState";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionStep> q = em.createQuery(jpaQuery, ProductionStep.class);
        q.setParameter("production", production);
        q.setParameter("stepState", stepState);
        return q;
    }
    
}
