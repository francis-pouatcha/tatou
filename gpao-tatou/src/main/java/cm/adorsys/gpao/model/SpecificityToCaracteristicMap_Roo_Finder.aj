// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.Caracteristic;
import cm.adorsys.gpao.model.Specificity;
import cm.adorsys.gpao.model.SpecificityToCaracteristicMap;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SpecificityToCaracteristicMap_Roo_Finder {
    
    public static Long SpecificityToCaracteristicMap.countFindSpecificityToCaracteristicMapsByCaracteristic(Caracteristic caracteristic) {
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SpecificityToCaracteristicMap AS o WHERE o.caracteristic = :caracteristic", Long.class);
        q.setParameter("caracteristic", caracteristic);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SpecificityToCaracteristicMap.countFindSpecificityToCaracteristicMapsBySpecificity(Specificity specificity) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity", Long.class);
        q.setParameter("specificity", specificity);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SpecificityToCaracteristicMap.countFindSpecificityToCaracteristicMapsBySpecificityAndCaracteristicEquals(Specificity specificity, Caracteristic caracteristic) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity AND o.caracteristic = :caracteristic", Long.class);
        q.setParameter("specificity", specificity);
        q.setParameter("caracteristic", caracteristic);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsByCaracteristic(Caracteristic caracteristic) {
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery("SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.caracteristic = :caracteristic", SpecificityToCaracteristicMap.class);
        q.setParameter("caracteristic", caracteristic);
        return q;
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsByCaracteristic(Caracteristic caracteristic, String sortFieldName, String sortOrder) {
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        String jpaQuery = "SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.caracteristic = :caracteristic";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery(jpaQuery, SpecificityToCaracteristicMap.class);
        q.setParameter("caracteristic", caracteristic);
        return q;
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsBySpecificity(Specificity specificity) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery("SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity", SpecificityToCaracteristicMap.class);
        q.setParameter("specificity", specificity);
        return q;
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsBySpecificity(Specificity specificity, String sortFieldName, String sortOrder) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        String jpaQuery = "SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery(jpaQuery, SpecificityToCaracteristicMap.class);
        q.setParameter("specificity", specificity);
        return q;
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsBySpecificityAndCaracteristicEquals(Specificity specificity, Caracteristic caracteristic) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery("SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity AND o.caracteristic = :caracteristic", SpecificityToCaracteristicMap.class);
        q.setParameter("specificity", specificity);
        q.setParameter("caracteristic", caracteristic);
        return q;
    }
    
    public static TypedQuery<SpecificityToCaracteristicMap> SpecificityToCaracteristicMap.findSpecificityToCaracteristicMapsBySpecificityAndCaracteristicEquals(Specificity specificity, Caracteristic caracteristic, String sortFieldName, String sortOrder) {
        if (specificity == null) throw new IllegalArgumentException("The specificity argument is required");
        if (caracteristic == null) throw new IllegalArgumentException("The caracteristic argument is required");
        EntityManager em = SpecificityToCaracteristicMap.entityManager();
        String jpaQuery = "SELECT o FROM SpecificityToCaracteristicMap AS o WHERE o.specificity = :specificity AND o.caracteristic = :caracteristic";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<SpecificityToCaracteristicMap> q = em.createQuery(jpaQuery, SpecificityToCaracteristicMap.class);
        q.setParameter("specificity", specificity);
        q.setParameter("caracteristic", caracteristic);
        return q;
    }
    
}
