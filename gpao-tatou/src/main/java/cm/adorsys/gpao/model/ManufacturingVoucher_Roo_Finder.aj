// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.DocumentStates;
import cm.adorsys.gpao.model.ManufacturingVoucher;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ManufacturingVoucher_Roo_Finder {
    
    public static Long ManufacturingVoucher.countFindManufacturingVouchersByDocumentState(DocumentStates documentState) {
        if (documentState == null) throw new IllegalArgumentException("The documentState argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ManufacturingVoucher AS o WHERE o.documentState = :documentState", Long.class);
        q.setParameter("documentState", documentState);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ManufacturingVoucher.countFindManufacturingVouchersByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ManufacturingVoucher AS o WHERE o.reference = :reference", Long.class);
        q.setParameter("reference", reference);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ManufacturingVoucher> ManufacturingVoucher.findManufacturingVouchersByDocumentState(DocumentStates documentState) {
        if (documentState == null) throw new IllegalArgumentException("The documentState argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        TypedQuery<ManufacturingVoucher> q = em.createQuery("SELECT o FROM ManufacturingVoucher AS o WHERE o.documentState = :documentState", ManufacturingVoucher.class);
        q.setParameter("documentState", documentState);
        return q;
    }
    
    public static TypedQuery<ManufacturingVoucher> ManufacturingVoucher.findManufacturingVouchersByDocumentState(DocumentStates documentState, String sortFieldName, String sortOrder) {
        if (documentState == null) throw new IllegalArgumentException("The documentState argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        String jpaQuery = "SELECT o FROM ManufacturingVoucher AS o WHERE o.documentState = :documentState";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ManufacturingVoucher> q = em.createQuery(jpaQuery, ManufacturingVoucher.class);
        q.setParameter("documentState", documentState);
        return q;
    }
    
    public static TypedQuery<ManufacturingVoucher> ManufacturingVoucher.findManufacturingVouchersByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        TypedQuery<ManufacturingVoucher> q = em.createQuery("SELECT o FROM ManufacturingVoucher AS o WHERE o.reference = :reference", ManufacturingVoucher.class);
        q.setParameter("reference", reference);
        return q;
    }
    
    public static TypedQuery<ManufacturingVoucher> ManufacturingVoucher.findManufacturingVouchersByReferenceEquals(String reference, String sortFieldName, String sortOrder) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = ManufacturingVoucher.entityManager();
        String jpaQuery = "SELECT o FROM ManufacturingVoucher AS o WHERE o.reference = :reference";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ManufacturingVoucher> q = em.createQuery(jpaQuery, ManufacturingVoucher.class);
        q.setParameter("reference", reference);
        return q;
    }
    
}
