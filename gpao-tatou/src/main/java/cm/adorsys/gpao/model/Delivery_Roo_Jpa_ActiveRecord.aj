// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.Delivery;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Delivery_Roo_Jpa_ActiveRecord {
    
    public static final List<String> Delivery.fieldNames4OrderClauseFilter = java.util.Arrays.asList("reference", "createBy", "createdDate", "origin", "status", "amoutHt", "taxedAmount", "taxeAmount", "curreny", "company", "docRef", "customer");
    
    public static long Delivery.countDeliverys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Delivery o", Long.class).getSingleResult();
    }
    
    public static List<Delivery> Delivery.findAllDeliverys() {
        return entityManager().createQuery("SELECT o FROM Delivery o", Delivery.class).getResultList();
    }
    
    public static List<Delivery> Delivery.findAllDeliverys(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Delivery o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Delivery.class).getResultList();
    }
    
    public static Delivery Delivery.findDelivery(Long id) {
        if (id == null) return null;
        return entityManager().find(Delivery.class, id);
    }
    
    public static List<Delivery> Delivery.findDeliveryEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Delivery o", Delivery.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Delivery> Delivery.findDeliveryEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Delivery o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Delivery.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public Delivery Delivery.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Delivery merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
