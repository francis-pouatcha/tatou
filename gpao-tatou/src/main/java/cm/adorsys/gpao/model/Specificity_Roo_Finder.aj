// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.Specificity;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Specificity_Roo_Finder {
    
    public static Long Specificity.countFindSpecificitysByDesignationEquals(String designation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        EntityManager em = Specificity.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Specificity AS o WHERE o.designation = :designation", Long.class);
        q.setParameter("designation", designation);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Specificity.countFindSpecificitysByDesignationLike(String designation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        designation = designation.replace('*', '%');
        if (designation.charAt(0) != '%') {
            designation = "%" + designation;
        }
        if (designation.charAt(designation.length() - 1) != '%') {
            designation = designation + "%";
        }
        EntityManager em = Specificity.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Specificity AS o WHERE LOWER(o.designation) LIKE LOWER(:designation)", Long.class);
        q.setParameter("designation", designation);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Specificity.countFindSpecificitysByDesignationLikeAndActiveNot(String designation, Boolean active) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        designation = designation.replace('*', '%');
        if (designation.charAt(0) != '%') {
            designation = "%" + designation;
        }
        if (designation.charAt(designation.length() - 1) != '%') {
            designation = designation + "%";
        }
        if (active == null) throw new IllegalArgumentException("The active argument is required");
        EntityManager em = Specificity.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Specificity AS o WHERE LOWER(o.designation) LIKE LOWER(:designation)  AND o.active IS NOT :active", Long.class);
        q.setParameter("designation", designation);
        q.setParameter("active", active);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Specificity> Specificity.findSpecificitysByDesignationEquals(String designation) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        EntityManager em = Specificity.entityManager();
        TypedQuery<Specificity> q = em.createQuery("SELECT o FROM Specificity AS o WHERE o.designation = :designation", Specificity.class);
        q.setParameter("designation", designation);
        return q;
    }
    
    public static TypedQuery<Specificity> Specificity.findSpecificitysByDesignationEquals(String designation, String sortFieldName, String sortOrder) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        EntityManager em = Specificity.entityManager();
        String jpaQuery = "SELECT o FROM Specificity AS o WHERE o.designation = :designation";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Specificity> q = em.createQuery(jpaQuery, Specificity.class);
        q.setParameter("designation", designation);
        return q;
    }
    
    public static TypedQuery<Specificity> Specificity.findSpecificitysByDesignationLike(String designation, String sortFieldName, String sortOrder) {
        if (designation == null || designation.length() == 0) throw new IllegalArgumentException("The designation argument is required");
        designation = designation.replace('*', '%');
        if (designation.charAt(0) != '%') {
            designation = "%" + designation;
        }
        if (designation.charAt(designation.length() - 1) != '%') {
            designation = designation + "%";
        }
        EntityManager em = Specificity.entityManager();
        String jpaQuery = "SELECT o FROM Specificity AS o WHERE LOWER(o.designation) LIKE LOWER(:designation)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Specificity> q = em.createQuery(jpaQuery, Specificity.class);
        q.setParameter("designation", designation);
        return q;
    }
    
}
