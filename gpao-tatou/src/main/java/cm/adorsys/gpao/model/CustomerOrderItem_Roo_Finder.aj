// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.CustomerOrder;
import cm.adorsys.gpao.model.CustomerOrderItem;
import cm.adorsys.gpao.model.Product;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CustomerOrderItem_Roo_Finder {
    
    public static Long CustomerOrderItem.countFindCustomerOrderItemsByCustomerOrder(CustomerOrder customerOrder) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder", Long.class);
        q.setParameter("customerOrder", customerOrder);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrderItem.countFindCustomerOrderItemsByCustomerOrderAndProduct(CustomerOrder customerOrder, Product product) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder AND o.product = :product", Long.class);
        q.setParameter("customerOrder", customerOrder);
        q.setParameter("product", product);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrderItem.countFindCustomerOrderItemsByProduct(Product product) {
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrderItem AS o WHERE o.product = :product", Long.class);
        q.setParameter("product", product);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrderItem.countFindCustomerOrderItemsByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrderItem AS o WHERE o.reference = :reference", Long.class);
        q.setParameter("reference", reference);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByCustomerOrder(CustomerOrder customerOrder) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery<CustomerOrderItem> q = em.createQuery("SELECT o FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder", CustomerOrderItem.class);
        q.setParameter("customerOrder", customerOrder);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByCustomerOrder(CustomerOrder customerOrder, String sortFieldName, String sortOrder) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrderItem> q = em.createQuery(jpaQuery, CustomerOrderItem.class);
        q.setParameter("customerOrder", customerOrder);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByCustomerOrderAndProduct(CustomerOrder customerOrder, Product product) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery<CustomerOrderItem> q = em.createQuery("SELECT o FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder AND o.product = :product", CustomerOrderItem.class);
        q.setParameter("customerOrder", customerOrder);
        q.setParameter("product", product);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByCustomerOrderAndProduct(CustomerOrder customerOrder, Product product, String sortFieldName, String sortOrder) {
        if (customerOrder == null) throw new IllegalArgumentException("The customerOrder argument is required");
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrderItem AS o WHERE o.customerOrder = :customerOrder AND o.product = :product";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrderItem> q = em.createQuery(jpaQuery, CustomerOrderItem.class);
        q.setParameter("customerOrder", customerOrder);
        q.setParameter("product", product);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByProduct(Product product) {
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery<CustomerOrderItem> q = em.createQuery("SELECT o FROM CustomerOrderItem AS o WHERE o.product = :product", CustomerOrderItem.class);
        q.setParameter("product", product);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByProduct(Product product, String sortFieldName, String sortOrder) {
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrderItem AS o WHERE o.product = :product";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrderItem> q = em.createQuery(jpaQuery, CustomerOrderItem.class);
        q.setParameter("product", product);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        TypedQuery<CustomerOrderItem> q = em.createQuery("SELECT o FROM CustomerOrderItem AS o WHERE o.reference = :reference", CustomerOrderItem.class);
        q.setParameter("reference", reference);
        return q;
    }
    
    public static TypedQuery<CustomerOrderItem> CustomerOrderItem.findCustomerOrderItemsByReferenceEquals(String reference, String sortFieldName, String sortOrder) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrderItem.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrderItem AS o WHERE o.reference = :reference";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrderItem> q = em.createQuery(jpaQuery, CustomerOrderItem.class);
        q.setParameter("reference", reference);
        return q;
    }
    
}
