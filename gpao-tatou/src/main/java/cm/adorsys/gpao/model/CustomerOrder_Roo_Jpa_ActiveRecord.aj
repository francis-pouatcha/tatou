// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.CustomerOrder;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerOrder_Roo_Jpa_ActiveRecord {
    
    public static final List<String> CustomerOrder.fieldNames4OrderClauseFilter = java.util.Arrays.asList("reference", "orderDate", "createdBy", "delivered", "validated", "validatedBy", "taxes", "taxeAmount", "amountHt", "totalAmount", "orderState", "currency", "customer", "deliveryDate");
    
    public static long CustomerOrder.countCustomerOrders() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CustomerOrder o", Long.class).getSingleResult();
    }
    
    public static List<CustomerOrder> CustomerOrder.findAllCustomerOrders() {
        return entityManager().createQuery("SELECT o FROM CustomerOrder o", CustomerOrder.class).getResultList();
    }
    
    public static List<CustomerOrder> CustomerOrder.findAllCustomerOrders(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CustomerOrder o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CustomerOrder.class).getResultList();
    }
    
    public static CustomerOrder CustomerOrder.findCustomerOrder(Long id) {
        if (id == null) return null;
        return entityManager().find(CustomerOrder.class, id);
    }
    
    public static List<CustomerOrder> CustomerOrder.findCustomerOrderEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CustomerOrder o", CustomerOrder.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<CustomerOrder> CustomerOrder.findCustomerOrderEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CustomerOrder o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CustomerOrder.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public CustomerOrder CustomerOrder.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CustomerOrder merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
