// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.CustomerOrder;
import cm.adorsys.gpao.model.DocumentStates;
import cm.adorsys.gpao.model.Partner;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CustomerOrder_Roo_Finder {
    
    public static Long CustomerOrder.countFindCustomerOrdersByCustomer(Partner customer) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrder AS o WHERE o.customer = :customer", Long.class);
        q.setParameter("customer", customer);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrder.countFindCustomerOrdersByOrderDateBetween(Date minOrderDate, Date maxOrderDate) {
        if (minOrderDate == null) throw new IllegalArgumentException("The minOrderDate argument is required");
        if (maxOrderDate == null) throw new IllegalArgumentException("The maxOrderDate argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrder AS o WHERE o.orderDate BETWEEN :minOrderDate AND :maxOrderDate", Long.class);
        q.setParameter("minOrderDate", minOrderDate);
        q.setParameter("maxOrderDate", maxOrderDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrder.countFindCustomerOrdersByOrderState(DocumentStates orderState) {
        if (orderState == null) throw new IllegalArgumentException("The orderState argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrder AS o WHERE o.orderState = :orderState", Long.class);
        q.setParameter("orderState", orderState);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CustomerOrder.countFindCustomerOrdersByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CustomerOrder AS o WHERE o.reference = :reference", Long.class);
        q.setParameter("reference", reference);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByCustomer(Partner customer) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery<CustomerOrder> q = em.createQuery("SELECT o FROM CustomerOrder AS o WHERE o.customer = :customer", CustomerOrder.class);
        q.setParameter("customer", customer);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByCustomer(Partner customer, String sortFieldName, String sortOrder) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = CustomerOrder.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrder AS o WHERE o.customer = :customer";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrder> q = em.createQuery(jpaQuery, CustomerOrder.class);
        q.setParameter("customer", customer);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByOrderDateBetween(Date minOrderDate, Date maxOrderDate) {
        if (minOrderDate == null) throw new IllegalArgumentException("The minOrderDate argument is required");
        if (maxOrderDate == null) throw new IllegalArgumentException("The maxOrderDate argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery<CustomerOrder> q = em.createQuery("SELECT o FROM CustomerOrder AS o WHERE o.orderDate BETWEEN :minOrderDate AND :maxOrderDate", CustomerOrder.class);
        q.setParameter("minOrderDate", minOrderDate);
        q.setParameter("maxOrderDate", maxOrderDate);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByOrderDateBetween(Date minOrderDate, Date maxOrderDate, String sortFieldName, String sortOrder) {
        if (minOrderDate == null) throw new IllegalArgumentException("The minOrderDate argument is required");
        if (maxOrderDate == null) throw new IllegalArgumentException("The maxOrderDate argument is required");
        EntityManager em = CustomerOrder.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrder AS o WHERE o.orderDate BETWEEN :minOrderDate AND :maxOrderDate";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrder> q = em.createQuery(jpaQuery, CustomerOrder.class);
        q.setParameter("minOrderDate", minOrderDate);
        q.setParameter("maxOrderDate", maxOrderDate);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByOrderState(DocumentStates orderState) {
        if (orderState == null) throw new IllegalArgumentException("The orderState argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery<CustomerOrder> q = em.createQuery("SELECT o FROM CustomerOrder AS o WHERE o.orderState = :orderState", CustomerOrder.class);
        q.setParameter("orderState", orderState);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByOrderState(DocumentStates orderState, String sortFieldName, String sortOrder) {
        if (orderState == null) throw new IllegalArgumentException("The orderState argument is required");
        EntityManager em = CustomerOrder.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrder AS o WHERE o.orderState = :orderState";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrder> q = em.createQuery(jpaQuery, CustomerOrder.class);
        q.setParameter("orderState", orderState);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrder.entityManager();
        TypedQuery<CustomerOrder> q = em.createQuery("SELECT o FROM CustomerOrder AS o WHERE o.reference = :reference", CustomerOrder.class);
        q.setParameter("reference", reference);
        return q;
    }
    
    public static TypedQuery<CustomerOrder> CustomerOrder.findCustomerOrdersByReferenceEquals(String reference, String sortFieldName, String sortOrder) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = CustomerOrder.entityManager();
        String jpaQuery = "SELECT o FROM CustomerOrder AS o WHERE o.reference = :reference";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CustomerOrder> q = em.createQuery(jpaQuery, CustomerOrder.class);
        q.setParameter("reference", reference);
        return q;
    }
    
}
