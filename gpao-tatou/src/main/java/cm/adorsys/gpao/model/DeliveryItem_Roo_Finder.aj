// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.Delivery;
import cm.adorsys.gpao.model.DeliveryItem;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect DeliveryItem_Roo_Finder {
    
    public static Long DeliveryItem.countFindDeliveryItemsByDelivery(Delivery delivery) {
        if (delivery == null) throw new IllegalArgumentException("The delivery argument is required");
        EntityManager em = DeliveryItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DeliveryItem AS o WHERE o.delivery = :delivery", Long.class);
        q.setParameter("delivery", delivery);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<DeliveryItem> DeliveryItem.findDeliveryItemsByDelivery(Delivery delivery) {
        if (delivery == null) throw new IllegalArgumentException("The delivery argument is required");
        EntityManager em = DeliveryItem.entityManager();
        TypedQuery<DeliveryItem> q = em.createQuery("SELECT o FROM DeliveryItem AS o WHERE o.delivery = :delivery", DeliveryItem.class);
        q.setParameter("delivery", delivery);
        return q;
    }
    
    public static TypedQuery<DeliveryItem> DeliveryItem.findDeliveryItemsByDelivery(Delivery delivery, String sortFieldName, String sortOrder) {
        if (delivery == null) throw new IllegalArgumentException("The delivery argument is required");
        EntityManager em = DeliveryItem.entityManager();
        String jpaQuery = "SELECT o FROM DeliveryItem AS o WHERE o.delivery = :delivery";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<DeliveryItem> q = em.createQuery(jpaQuery, DeliveryItem.class);
        q.setParameter("delivery", delivery);
        return q;
    }
    
}
