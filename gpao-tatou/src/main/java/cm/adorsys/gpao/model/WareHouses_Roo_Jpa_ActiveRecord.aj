// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.WareHouses;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect WareHouses_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager WareHouses.entityManager;
    
    public static final EntityManager WareHouses.entityManager() {
        EntityManager em = new WareHouses().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long WareHouses.countWareHouseses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM WareHouses o", Long.class).getSingleResult();
    }
    
    public static List<WareHouses> WareHouses.findAllWareHouseses() {
        return entityManager().createQuery("SELECT o FROM WareHouses o", WareHouses.class).getResultList();
    }
    
    public static WareHouses WareHouses.findWareHouses(Long id) {
        if (id == null) return null;
        return entityManager().find(WareHouses.class, id);
    }
    
    public static List<WareHouses> WareHouses.findWareHousesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM WareHouses o", WareHouses.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void WareHouses.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void WareHouses.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            WareHouses attached = WareHouses.findWareHouses(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void WareHouses.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void WareHouses.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public WareHouses WareHouses.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        WareHouses merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
