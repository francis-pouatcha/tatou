// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.RawMaterialOrder;
import cm.adorsys.gpao.model.RawMaterialOrderItem;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RawMaterialOrderItem_Roo_Finder {
    
    public static Long RawMaterialOrderItem.countFindRawMaterialOrderItemsByRawMaterialOrder(RawMaterialOrder rawMaterialOrder) {
        if (rawMaterialOrder == null) throw new IllegalArgumentException("The rawMaterialOrder argument is required");
        EntityManager em = RawMaterialOrderItem.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RawMaterialOrderItem AS o WHERE o.rawMaterialOrder = :rawMaterialOrder", Long.class);
        q.setParameter("rawMaterialOrder", rawMaterialOrder);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RawMaterialOrderItem> RawMaterialOrderItem.findRawMaterialOrderItemsByRawMaterialOrder(RawMaterialOrder rawMaterialOrder) {
        if (rawMaterialOrder == null) throw new IllegalArgumentException("The rawMaterialOrder argument is required");
        EntityManager em = RawMaterialOrderItem.entityManager();
        TypedQuery<RawMaterialOrderItem> q = em.createQuery("SELECT o FROM RawMaterialOrderItem AS o WHERE o.rawMaterialOrder = :rawMaterialOrder", RawMaterialOrderItem.class);
        q.setParameter("rawMaterialOrder", rawMaterialOrder);
        return q;
    }
    
    public static TypedQuery<RawMaterialOrderItem> RawMaterialOrderItem.findRawMaterialOrderItemsByRawMaterialOrder(RawMaterialOrder rawMaterialOrder, String sortFieldName, String sortOrder) {
        if (rawMaterialOrder == null) throw new IllegalArgumentException("The rawMaterialOrder argument is required");
        EntityManager em = RawMaterialOrderItem.entityManager();
        String jpaQuery = "SELECT o FROM RawMaterialOrderItem AS o WHERE o.rawMaterialOrder = :rawMaterialOrder";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<RawMaterialOrderItem> q = em.createQuery(jpaQuery, RawMaterialOrderItem.class);
        q.setParameter("rawMaterialOrder", rawMaterialOrder);
        return q;
    }
    
}
