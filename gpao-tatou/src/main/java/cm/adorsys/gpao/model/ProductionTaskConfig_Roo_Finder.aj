// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.ProductionStepConfig;
import cm.adorsys.gpao.model.ProductionTaskConfig;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ProductionTaskConfig_Roo_Finder {
    
    public static Long ProductionTaskConfig.countFindProductionTaskConfigsByProductionStepConfig(ProductionStepConfig productionStepConfig) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig", Long.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProductionTaskConfig.countFindProductionTaskConfigsByProductionStepConfigAndRank(ProductionStepConfig productionStepConfig, int rank) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig AND o.rank = :rank", Long.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        q.setParameter("rank", rank);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ProductionTaskConfig> ProductionTaskConfig.findProductionTaskConfigsByProductionStepConfig(ProductionStepConfig productionStepConfig) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        TypedQuery<ProductionTaskConfig> q = em.createQuery("SELECT o FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig", ProductionTaskConfig.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        return q;
    }
    
    public static TypedQuery<ProductionTaskConfig> ProductionTaskConfig.findProductionTaskConfigsByProductionStepConfig(ProductionStepConfig productionStepConfig, String sortFieldName, String sortOrder) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        String jpaQuery = "SELECT o FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionTaskConfig> q = em.createQuery(jpaQuery, ProductionTaskConfig.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        return q;
    }
    
    public static TypedQuery<ProductionTaskConfig> ProductionTaskConfig.findProductionTaskConfigsByProductionStepConfigAndRank(ProductionStepConfig productionStepConfig, int rank) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        TypedQuery<ProductionTaskConfig> q = em.createQuery("SELECT o FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig AND o.rank = :rank", ProductionTaskConfig.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        q.setParameter("rank", rank);
        return q;
    }
    
    public static TypedQuery<ProductionTaskConfig> ProductionTaskConfig.findProductionTaskConfigsByProductionStepConfigAndRank(ProductionStepConfig productionStepConfig, int rank, String sortFieldName, String sortOrder) {
        if (productionStepConfig == null) throw new IllegalArgumentException("The productionStepConfig argument is required");
        EntityManager em = ProductionTaskConfig.entityManager();
        String jpaQuery = "SELECT o FROM ProductionTaskConfig AS o WHERE o.productionStepConfig = :productionStepConfig AND o.rank = :rank";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionTaskConfig> q = em.createQuery(jpaQuery, ProductionTaskConfig.class);
        q.setParameter("productionStepConfig", productionStepConfig);
        q.setParameter("rank", rank);
        return q;
    }
    
}
