// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cm.adorsys.gpao.model;

import cm.adorsys.gpao.model.ProductionStepConfig;
import cm.adorsys.gpao.model.ProductionTypeConfig;
import cm.adorsys.gpao.model.ProductionWorkshop;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ProductionStepConfig_Roo_Finder {
    
    public static Long ProductionStepConfig.countFindProductionStepConfigsByProductionTypeConf(ProductionTypeConfig productionTypeConf) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf", Long.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProductionStepConfig.countFindProductionStepConfigsByProductionTypeConfAndRank(ProductionTypeConfig productionTypeConf, int rank) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf AND o.rank = :rank", Long.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        q.setParameter("rank", rank);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ProductionStepConfig.countFindProductionStepConfigsByProductionWorkshop(ProductionWorkshop productionWorkshop) {
        if (productionWorkshop == null) throw new IllegalArgumentException("The productionWorkshop argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ProductionStepConfig AS o WHERE o.productionWorkshop = :productionWorkshop", Long.class);
        q.setParameter("productionWorkshop", productionWorkshop);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionTypeConf(ProductionTypeConfig productionTypeConf) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery<ProductionStepConfig> q = em.createQuery("SELECT o FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf", ProductionStepConfig.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        return q;
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionTypeConf(ProductionTypeConfig productionTypeConf, String sortFieldName, String sortOrder) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        String jpaQuery = "SELECT o FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionStepConfig> q = em.createQuery(jpaQuery, ProductionStepConfig.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        return q;
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionTypeConfAndRank(ProductionTypeConfig productionTypeConf, int rank) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery<ProductionStepConfig> q = em.createQuery("SELECT o FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf AND o.rank = :rank", ProductionStepConfig.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        q.setParameter("rank", rank);
        return q;
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionTypeConfAndRank(ProductionTypeConfig productionTypeConf, int rank, String sortFieldName, String sortOrder) {
        if (productionTypeConf == null) throw new IllegalArgumentException("The productionTypeConf argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        String jpaQuery = "SELECT o FROM ProductionStepConfig AS o WHERE o.productionTypeConf = :productionTypeConf AND o.rank = :rank";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionStepConfig> q = em.createQuery(jpaQuery, ProductionStepConfig.class);
        q.setParameter("productionTypeConf", productionTypeConf);
        q.setParameter("rank", rank);
        return q;
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionWorkshop(ProductionWorkshop productionWorkshop) {
        if (productionWorkshop == null) throw new IllegalArgumentException("The productionWorkshop argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        TypedQuery<ProductionStepConfig> q = em.createQuery("SELECT o FROM ProductionStepConfig AS o WHERE o.productionWorkshop = :productionWorkshop", ProductionStepConfig.class);
        q.setParameter("productionWorkshop", productionWorkshop);
        return q;
    }
    
    public static TypedQuery<ProductionStepConfig> ProductionStepConfig.findProductionStepConfigsByProductionWorkshop(ProductionWorkshop productionWorkshop, String sortFieldName, String sortOrder) {
        if (productionWorkshop == null) throw new IllegalArgumentException("The productionWorkshop argument is required");
        EntityManager em = ProductionStepConfig.entityManager();
        String jpaQuery = "SELECT o FROM ProductionStepConfig AS o WHERE o.productionWorkshop = :productionWorkshop";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ProductionStepConfig> q = em.createQuery(jpaQuery, ProductionStepConfig.class);
        q.setParameter("productionWorkshop", productionWorkshop);
        return q;
    }
    
}
